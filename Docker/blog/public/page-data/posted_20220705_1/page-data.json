{"componentChunkName":"component---src-templates-blog-post-js","path":"/posted_20220705_1/","result":{"data":{"site":{"siteMetadata":{"title":"Shin-tech25's Blog"}},"markdownRemark":{"id":"5d42f00c-a62a-53cd-b4ef-fc61d39373a0","excerpt":"このページでは、保守的な Playbook の書き方、冪等性などをしっかりと考慮した Playbook や tips を紹介しています。シンプルでクリーンな Playbook を作成しましょう。 保守的な Playbook Ansible は Red Hat…","html":"<p>このページでは、保守的な Playbook の書き方、冪等性などをしっかりと考慮した Playbook や tips を紹介しています。シンプルでクリーンな Playbook を作成しましょう。</p>\n<h1>保守的な Playbook</h1>\n<p>Ansible は Red Hat 社により開発されているサーバプロビジョニング・ツールです。Linux を始めとして、Windows、Cisco 機器などに対しても設定変更を行うことができ、汎用性が高いことがメリットです。</p>\n<p>一方、設計段階で Playbook(=Ansible 実行コード)の設計方針をしっかりと決めなければ、Playbook と処理の対応関係が次第に分かりづらくなり、保守に時間がかかるコードを量産してしまうことに繋がります。</p>\n<p>業務で実際に「汚い」Playbook を見てきました。見ただけでは実際に何をする処理なのか分かりづらく、ミスの温床になります。</p>\n<p>そういった Playbook を作らないためにどうしたら良いか。以下に記載しました。</p>\n<h2>概要</h2>\n<h3>トップダウン設計</h3>\n<h3>冪等性</h3>\n<h3>変数の設計</h3>\n<h2>Playbook</h2>\n<h3>Playbook の総本山 site.yml</h3>\n<h3>役割単位で Playbook を設計する</h3>\n<h3>role に実際の処理を書く</h3>\n<h3>role はタグ付けし、局所的運用を可能にする</h3>\n<h2>Inventory の設計</h2>\n<h3>YAML 形式での Inventory 構成</h3>\n<h3>host_vars, group_vars</h3>\n<h2>role の書き方</h2>\n<h3>車輪の再発明を防ぐ!Ansible-Galaxy</h3>\n<h2>リファクタリング</h2>\n<h1>内部リンク</h1>\n<h1>参考</h1>","frontmatter":{"title":"メンテナンスしやすいAnsiblePlaybookの書き方","date":"July 06, 2022","description":"メンテナンスしやすいAnsiblePlaybookの書き方"}},"previous":{"fields":{"slug":"/new-beginnings/"},"frontmatter":{"title":"New Beginnings"}},"next":null},"pageContext":{"id":"5d42f00c-a62a-53cd-b4ef-fc61d39373a0","previousPostId":"2865090f-601e-5228-a507-561c002ffb6c","nextPostId":null}},"staticQueryHashes":["2841359383","3257411868"]}